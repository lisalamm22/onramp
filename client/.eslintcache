[{"/Users/lisalam/Desktop/onramp-fullstack-project-main 4/client/src/index.tsx":"1","/Users/lisalam/Desktop/onramp-fullstack-project-main 4/client/src/App.tsx":"2","/Users/lisalam/Desktop/onramp-fullstack-project-main 4/client/src/components/login.tsx":"3","/Users/lisalam/Desktop/onramp-fullstack-project-main 4/client/src/components/home.tsx":"4","/Users/lisalam/Desktop/onramp-fullstack-project-main 4/client/src/components/register.tsx":"5","/Users/lisalam/Desktop/onramp-fullstack-project-main 4/client/src/components/gallery.tsx":"6","/Users/lisalam/Desktop/onramp-fullstack-project-main 4/client/src/components/search.tsx":"7","/Users/lisalam/Desktop/onramp-fullstack-project-main 4/client/src/components/modal.tsx":"8","/Users/lisalam/Desktop/onramp-fullstack-project-main 4/client/src/components/edit_modal.tsx":"9","/Users/lisalam/Desktop/onramp-fullstack-project-main 4/client/src/components/random_page.tsx":"10","/Users/lisalam/Desktop/onramp-fullstack-project-main 4/client/src/components/search_results_page.tsx":"11"},{"size":506,"mtime":1610225006095,"results":"12","hashOfConfig":"13"},{"size":1565,"mtime":1610386614886,"results":"14","hashOfConfig":"13"},{"size":2669,"mtime":1610319397427,"results":"15","hashOfConfig":"13"},{"size":2807,"mtime":1610443002146,"results":"16","hashOfConfig":"13"},{"size":3223,"mtime":1610251172114,"results":"17","hashOfConfig":"13"},{"size":7194,"mtime":1610488073569,"results":"18","hashOfConfig":"13"},{"size":934,"mtime":1610390409274,"results":"19","hashOfConfig":"13"},{"size":3361,"mtime":1610437545191,"results":"20","hashOfConfig":"13"},{"size":5623,"mtime":1610437918461,"results":"21","hashOfConfig":"13"},{"size":2202,"mtime":1610478045330,"results":"22","hashOfConfig":"13"},{"size":3498,"mtime":1610488227442,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"15i8vgi",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/lisalam/Desktop/onramp-fullstack-project-main 4/client/src/index.tsx",[],["50","51"],"/Users/lisalam/Desktop/onramp-fullstack-project-main 4/client/src/App.tsx",[],"/Users/lisalam/Desktop/onramp-fullstack-project-main 4/client/src/components/login.tsx",[],"/Users/lisalam/Desktop/onramp-fullstack-project-main 4/client/src/components/home.tsx",[],"/Users/lisalam/Desktop/onramp-fullstack-project-main 4/client/src/components/register.tsx",[],"/Users/lisalam/Desktop/onramp-fullstack-project-main 4/client/src/components/gallery.tsx",["52"],"/Users/lisalam/Desktop/onramp-fullstack-project-main 4/client/src/components/search.tsx",[],"/Users/lisalam/Desktop/onramp-fullstack-project-main 4/client/src/components/modal.tsx",["53","54","55"],"import React, {useState, useEffect} from 'react';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Modal from '@material-ui/core/Modal';\nimport Container from '@material-ui/core/Container';\nimport '../stylesheets/modal.css';\nimport { Button } from '@material-ui/core';\n\nconst PhotoModal: React.FC<Props> = ({ modalImg, setModalImg, setEditModalImg, likes, setLikes}) => {\n    const [likeButton, setLikeButton] = useState<any>(<Button onClick={() => {handleLike(modalImg.id)}}>Like Button</Button>)\n\n    useEffect(() => {\n        if(likes.includes(modalImg.id)){\n            setLikeButton(<Button>Cannot Like</Button>)\n        }\n    }, [])\n    \n    const handleClose = (e:any) => {\n        if(e.target.classList.contains('MuiBackdrop-root')){\n            setModalImg(null)\n        }\n    }\n\n    async function postLike(image_id:string) {\n        try{\n            const body = {\n                image: image_id,\n            }\n            await fetch('/user/likes', {\n                method: 'POST',\n                headers: { \n                    token: localStorage.token,\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify(body)\n            })\n        } catch(error){\n            console.error(error.message)\n        }\n    }\n\n    const handleLike = (image_id:string) => {\n        console.log(likes)\n        postLike(image_id);\n        setLikes([]);\n        setLikeButton(<Button>Cannot Like</Button>)\n    }\n\n    return (\n        <Modal\n            open= {Boolean(modalImg)}\n            onClose={e => handleClose(e)}\n            closeAfterTransition\n            BackdropComponent={Backdrop}\n            BackdropProps = {{\n                timeout: 500\n            }}\n        >\n            <div className=\"photo-modal\">\n                <header className=\"photo-modal-header\">\n                    <p className=\"profile\">\n                        <img src={modalImg.user.profile_image.small} className=\"profile-pic\"/>\n                        {`${modalImg.user.name}`}\n                    </p> \n                    <p>{modalImg.location ? (modalImg.location.name ? `Location: ${modalImg.location.name}` : '') : ''}</p> \n                </header>\n                <Container maxWidth=\"lg\" id=\"photo-modal-container\">\n                    <img src={modalImg.urls.regular} className=\"photo-modal-img\"/>\n                </Container>\n\n                <nav className=\"options-nav\">\n                    {/* {likes.includes(modalImg.id) ? <Button>Cannot Like</Button> :\n                        <Button onClick={() => {handleLike(modalImg.id)}}>Like Button</Button>} */}\n                    {likeButton}\n                    <p>{`${modalImg.likes} Likes`}</p> \n                    <p>{`${modalImg.downloads} Downloads`}</p> \n                    <Button onClick={()=>{\n                        setEditModalImg(modalImg)\n                        setModalImg(null)\n                    }}>\n                    Edit</Button>\n                </nav>\n\n                <p>{modalImg.description ? `Title: ${modalImg.description}` : ''}</p> \n                <p>{modalImg.alt_description ? `${modalImg.alt_description}` : ''}</p> \n            </div>\n        </Modal>\n    )\n}\n\ninterface Props {\n    modalImg: any,\n    setModalImg: any,\n    setEditModalImg: any,\n    likes: any,\n    setLikes: any,\n}\n\nexport default PhotoModal\n","/Users/lisalam/Desktop/onramp-fullstack-project-main 4/client/src/components/edit_modal.tsx",["56","57"],"import React, { useState, useEffect } from 'react';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Modal from '@material-ui/core/Modal';\nimport Container from '@material-ui/core/Container';\n// import Slider from '@material-ui/core/Slider'\nimport '../stylesheets/modal.css';\nimport '../stylesheets/edit_modal.css';\nimport { Button } from '@material-ui/core';\n\nconst DEFAULT_OPTIONS = [\n    {\n        name: 'BRIGHTNESS',\n        property: 'brightness',\n        value: 100,\n        range: {\n            min: 0,\n            max: 200,\n        },\n        unit: '%'\n\n    },\n    {\n        name: 'CONTRAST',\n        property: 'contrast',\n        value: 100,\n        range: {\n            min: 0,\n            max: 200,\n        },\n        unit: '%'\n\n    },\n    {\n        name: 'SATURATION',\n        property: 'saturate',\n        value: 100,\n        range: {\n            min: 0,\n            max: 200,\n        },\n        unit: '%'\n\n    },\n    {\n        name: 'GRAYSCALE',\n        property: 'grayscale',\n        value: 0,\n        range: {\n            min: 0,\n            max: 100,\n        },\n        unit: '%'\n\n    },\n    {\n        name: 'SEPIA',\n        property: 'sepia',\n        value: 0,\n        range: {\n            min: 0,\n            max: 100,\n        },\n        unit: '%'\n\n    },\n    {\n        name: 'HUE ROTATE',\n        property: 'hue-rotate',\n        value: 0,\n        range: {\n            min: 0,\n            max: 360,\n        },\n        unit: 'deg'\n\n    },\n    {\n        name: 'BLUR',\n        property: 'blur',\n        value: 0,\n        range: {\n            min: 0,\n            max: 20,\n        },\n        unit: 'px'\n\n    },\n]\n\nconst EditModal: React.FC<Props> = ({ editModalImg, setEditModalImg, likes, setLikes }) => {\n    const [options, setOptions] = useState<any>(DEFAULT_OPTIONS)\n    const [likeButton, setLikeButton] = useState<any>(<Button onClick={() => {handleLike(editModalImg.id)}}>Like Button</Button>)\n\n    useEffect(() => {\n        if(likes.includes(editModalImg.id)){\n            setLikeButton(<Button>Cannot Like</Button>)\n        }\n    }, [])\n\n    const handleClose = (e:any) => {\n        console.log(editModalImg)\n        console.log(e)\n        if(e.target.classList.contains('MuiBackdrop-root')){\n            setEditModalImg(null)\n        }\n    }\n\n    const handleChange = (e:any, selectedIdx:number) => {\n        setOptions((prevOptions:any) => {\n            let newOptions = prevOptions.map((op:any, opIdx:number) => {\n                if( opIdx !== selectedIdx ){\n                    return op\n                } else{\n                    return { ...op, value: e.target.value} \n                }\n            })\n            console.log(newOptions)\n            return newOptions\n        })\n    }\n\n    const getImageEdits = () => {\n        const filters = options.map( (op:any) => {\n            if(op.range.max === 200){\n                return `${op.property}(${op.value/op.range.max*2})`\n            }\n            else if( op.range.max === 100){\n                return `${op.property}(${op.value/op.range.max})`\n            }\n            else{\n                return `${op.property}(${op.value}${op.unit})`\n            }\n        })\n        return { filter: filters.join(\" \")}\n    }\n\n    async function postLike(image_id:string) {\n        try{\n            const body = {\n                image: image_id,\n            }\n            await fetch('/user/likes', {\n                method: 'POST',\n                headers: { \n                    token: localStorage.token,\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify(body)\n            })\n        } catch(error){\n            console.error(error.message)\n        }\n    }\n\n    const handleLike = (image_id:string) => {\n        postLike(image_id);\n        setLikes([]);\n        setLikeButton(<Button>Cannot Like</Button>)\n    }\n\n    return (\n        <Modal\n            open= {Boolean(editModalImg)}\n            onClose={e => handleClose(e)}\n            closeAfterTransition\n            BackdropComponent={Backdrop}\n            BackdropProps = {{\n                timeout: 500\n            }}\n        >\n            <div className=\"photo-modal\">\n                <p className=\"edit-photo-title\">{`EDIT THIS IMAGE BY ${editModalImg.user.name.toUpperCase()}`}</p>\n                <Container maxWidth=\"lg\" id=\"photo-modal-container\">\n                    <img src={editModalImg.urls.regular} className=\"photo-modal-img\" style={getImageEdits()}/>\n                </Container>\n                {likeButton}\n                <div className=\"filters\">\n                    {options.map((option:any, idx:number) =>{\n                        return (\n                            <div className=\"filter-option\">\n                                <input\n                                    type='range' \n                                    value={option.value} \n                                    onChange={e => handleChange(e, idx)}\n                                    min={option.range.min}\n                                    max={option.range.max}\n                                    name={option.name}\n                                    className=\"filter-slider\"\n                                    \n                                ></input>\n                                <p className=\"filter-label\">{option.name}</p>\n                            </div>\n                        )\n                    })}\n                </div>\n            </div> \n        </Modal>\n    )\n}\n\ninterface Props {\n    editModalImg: any,\n    setEditModalImg: any,\n    likes: any,\n    setLikes: any,\n}\n\nexport default EditModal\n","/Users/lisalam/Desktop/onramp-fullstack-project-main 4/client/src/components/random_page.tsx",["58"],"import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport '../stylesheets/gallery.css'\nimport { LinearProgress } from '@material-ui/core';\n\nconst RandomPage: React.FC<Props> = ({setModalImg}) => {\n    const [images, setImages] = useState<any>([]);\n\n    useEffect(() => {\n        fetchImages();\n    }, [])\n\n    const unsplashAPI = \"https://api.unsplash.com\"\n    // const accessKey = process.env.UNSPLASH_ACCESS_KEY\n\n    const fetchImages = async () => {\n        // setSearchInput('')\n        // setIsSearching(false)\n        // setSearchPage(1)\n        const res = await axios\n            .get(`${unsplashAPI}/photos/random?client_id=DvjCg2G2B7CpZqGGEO0BJbxr6YpaOeuFt09A32zLnEY&count=10 `)\n        const fetchedImages = await res.data;\n        setImages([...images, ...fetchedImages])\n    }\n\n    return (\n        <InfiniteScroll\n            dataLength = {images.length}\n            next = {fetchImages}\n            hasMore = {true}\n            loader={<LinearProgress/>}\n        >\n            <GridList cellHeight={250} cols={3} spacing={15} >\n                {images.map((image:any,idx:number) => {\n                    return (\n                        <GridListTile key={idx}\n                        style={{ flexGrow: 1 }}\n                        cols = {(image.width/5000)}\n                        className='gallery-tile'\n                        onClick= {() => setModalImg(image)}>\n                            <img \n                                srcSet={`${image.urls.thumb}?w=161&fit=crop&auto=format 1x, \n                                ${image.urls.thumb}?w=161&fit=crop&auto=format&dpr=2 2x`}\n                                src={`${image.urls.thumb}`}\n                                alt={image.description || image.alt_description}\n                                />\n                    </GridListTile>\n                )})}\n            </GridList>\n        </InfiniteScroll>\n    )\n}\n\ninterface Props{\n    setModalImg: any,\n    // images: any,\n    // setImages: any\n}\n\nexport default RandomPage","/Users/lisalam/Desktop/onramp-fullstack-project-main 4/client/src/components/search_results_page.tsx",["59"],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":53,"column":8,"nodeType":"66","endLine":53,"endColumn":19,"suggestions":"67"},{"ruleId":"64","severity":1,"message":"68","line":15,"column":8,"nodeType":"66","endLine":15,"endColumn":10,"suggestions":"69"},{"ruleId":"70","severity":1,"message":"71","line":61,"column":25,"nodeType":"72","endLine":61,"endColumn":95},{"ruleId":"70","severity":1,"message":"71","line":67,"column":21,"nodeType":"72","endLine":67,"endColumn":83},{"ruleId":"64","severity":1,"message":"73","line":98,"column":8,"nodeType":"66","endLine":98,"endColumn":10,"suggestions":"74"},{"ruleId":"70","severity":1,"message":"71","line":174,"column":21,"nodeType":"72","endLine":174,"endColumn":111},{"ruleId":"64","severity":1,"message":"75","line":14,"column":8,"nodeType":"66","endLine":14,"endColumn":10,"suggestions":"76"},{"ruleId":"64","severity":1,"message":"77","line":30,"column":7,"nodeType":"66","endLine":30,"endColumn":21,"suggestions":"78"},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getSearchImages'. Either include it or remove the dependency array.","ArrayExpression",["81"],"React Hook useEffect has missing dependencies: 'likes' and 'modalImg.id'. Either include them or remove the dependency array.",["82"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'editModalImg.id' and 'likes'. Either include them or remove the dependency array.",["83"],"React Hook useEffect has a missing dependency: 'fetchImages'. Either include it or remove the dependency array.",["84"],"React Hook useEffect has a missing dependency: 'fetchSearchImages'. Either include it or remove the dependency array.",["85"],"no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},{"desc":"88","fix":"89"},{"desc":"90","fix":"91"},{"desc":"92","fix":"93"},{"desc":"94","fix":"95"},"Update the dependencies array to be: [getSearchImages, newSearch]",{"range":"96","text":"97"},"Update the dependencies array to be: [likes, modalImg.id]",{"range":"98","text":"99"},"Update the dependencies array to be: [editModalImg.id, likes]",{"range":"100","text":"101"},"Update the dependencies array to be: [fetchImages]",{"range":"102","text":"103"},"Update the dependencies array to be: [fetchSearchImages, searchImages]",{"range":"104","text":"105"},[2126,2137],"[getSearchImages, newSearch]",[644,646],"[likes, modalImg.id]",[2066,2068],"[editModalImg.id, likes]",[499,501],"[fetchImages]",[990,1004],"[fetchSearchImages, searchImages]"]